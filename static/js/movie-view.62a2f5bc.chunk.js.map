{"version":3,"sources":["components/List/List.js","components/Container/Container.js","components/Container/Container.module.css","services/api.js","components/List/List.module.css","components/Button/Button.js","../node_modules/nanoid/index.browser.js","components/MovieCard/MovieCard.js","views/MovieView.js"],"names":["List","children","className","s","Container","module","exports","API_KEY","BASE","Button","type","text","onClick","MovieCard","title","score","poster","overview","genres","console","log","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","alt","src","map","name","AddInfoSubView","lazy","MovieView","useState","budget","runtime","movie","setMovie","useParams","useEffect","axios","get","then","response","data","vote_average","poster_path","fallback","path","element"],"mappings":"uHAAA,8DAEe,SAASA,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SAC7B,OAAO,oBAAIC,UAAWC,IAAEH,KAAjB,SAAwBC,M,gCCHjC,8DAEe,SAASG,EAAT,GAAkC,IAAbH,EAAY,EAAZA,SAClC,OAAO,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,M,mBCFvCI,EAAOC,QAAU,CAAC,UAAY,+B,oHCDjBC,EAAU,mCACVC,EAAO,gC,mBCApBH,EAAOC,QAAU,CAAC,KAAO,qB,gCCDzB,8DAEe,SAASG,EAAT,GAA0C,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAC3C,OACE,wBAAQV,UAAWC,IAAEM,OAAQC,KAAMA,EAAME,QAASA,EAAlD,SACGD,M,6HCsBP,I,uBCnBe,SAASE,EAAT,GAAgE,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OAClEC,QAAQC,IAAIF,IDmCD,WAGX,IAH0B,IAAdG,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KC9CMG,GAChB,OACE,eAAC1B,EAAA,EAAD,WACE,qBAAK2B,IAAKjB,EAAOkB,IAAG,0CAAqChB,KACzD,eAACZ,EAAA,EAAD,WACE,6BAAKU,IACL,4BAAIC,EAAQ,GAAKA,IACjB,4BAAIE,IACJ,cAACjB,EAAA,EAAD,UACGkB,EAAOe,KAAI,gBAAGX,EAAH,EAAGA,GAAIY,EAAP,EAAOA,KAAP,OACV,6BAAcA,GAALZ,c,6CCTfa,EAAiBC,gBAAK,kBAC1B,gCAYa,SAASC,IACtB,MAA0BC,mBAAS,CAAEC,OAAQ,EAAGC,QAAS,IAAzD,mBAAOC,EAAP,KAAcC,EAAd,KACQpB,EAAOqB,cAAPrB,GACRsB,qBAAU,WACRC,IACGC,IADH,UAEOtC,IAFP,kBAEqBc,EAFrB,oBAEmCf,IAFnC,sBAKGwC,MAAK,SAAAC,GACJN,EAASM,EAASC,MAClB9B,QAAQC,IAAI4B,EAASC,MACrB9B,QAAQC,IAAIqB,QAEf,IACH,IAAQS,EAA4DT,EAA5DS,aAAcpC,EAA8C2B,EAA9C3B,MAAOqC,EAAuCV,EAAvCU,YAAalC,EAA0BwB,EAA1BxB,SAA1C,EAAoEwB,EAAhBvB,cAApD,MAA6D,GAA7D,EACA,OACE,qCACE,cAACT,EAAA,EAAD,CAAQC,KAAK,SAASC,KAAK,YAC3B,cAACE,EAAD,CACEE,MAAOmC,EACPpC,MAAOA,EACPE,OAAQmC,EACRlC,SAAUA,EACVC,OAAQA,IAEV,cAAC,WAAD,CAAUkC,SAAU,cAAC,IAAD,IAApB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,UAAUC,QAAS,cAACnB,EAAD","file":"static/js/movie-view.62a2f5bc.chunk.js","sourcesContent":["import s from 'components/List/List.module.css';\n\nexport default function List({ children }) {\n  return <ul className={s.List}>{children}</ul>;\n}\n","import s from 'components/Container/Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={s.Container}>{children}</div>;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__RbBaM\"};","export const API_KEY = '6fc149a4cf08bb260c2094f65b6f8095';\nexport const BASE = 'https://api.themoviedb.org/3';\n\nexport async function fetchMovies(value, page) {\n  return await fetch(\n    // `${BASE}/search/movie?api_key=${API_KEY}&language=en-US&query=${value}&page=${page}&include_adult=false`,\n    `${BASE}/search/movie?api_key=${API_KEY}&query=${value}`,\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    })\n    .then(data => data);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__21E3Q\"};","import s from 'components/Button/Button.module.css';\n\nexport default function Button({ type, text, onClick }) {\n  return (\n    <button className={s.Button} type={type} onClick={onClick}>\n      {text}\n    </button>\n  );\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// user score\n// overview\n// genres\nimport { nanoid } from 'nanoid';\n\nimport Container from 'components/Container/Container';\nimport List from 'components/List/List';\n\nexport default function MovieCard({ title, score, poster, overview, genres }) {\n  console.log(genres);\n  const genreId = nanoid();\n  return (\n    <Container>\n      <img alt={title} src={`https://image.tmdb.org/t/p/w300/${poster}`} />\n      <Container>\n        <h2>{title}</h2>\n        <p>{score > 0 && score}</p>\n        <p>{overview}</p>\n        <List>\n          {genres.map(({ id, name }) => (\n            <li key={id}>{name}</li>\n          ))}\n        </List>\n      </Container>\n    </Container>\n  );\n}\n","// go back button\n\nimport { Routes, Route, useParams } from 'react-router';\nimport { Suspense, lazy } from 'react';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport Loading from 'components/Loader/Loader';\nimport axios from 'axios';\nimport { API_KEY, BASE } from 'services/api';\nimport Button from 'components/Button/Button';\nimport { useState, useEffect } from 'react';\n\nconst AddInfoSubView = lazy(() =>\n  import('views/AddInfoSubView' /*webpackChunkName: \"add-info-view\" */),\n);\n\nconst Cast = lazy(() =>\n  import('components/Cast/Cast' /*webpackChunkName: \"cast\" */),\n);\nconst Reviews = lazy(() =>\n  import('components/Reviews/Reviews' /*webpackChunkName: \"reviews\" */),\n);\n\n// sub additional information\n\nexport default function MovieView() {\n  const [movie, setMovie] = useState({ budget: 0, runtime: 0 });\n  const { id } = useParams();\n  useEffect(() => {\n    axios\n      .get(\n        `${BASE}/movie/${id}?api_key=${API_KEY}&language=en-US\n`,\n      )\n      .then(response => {\n        setMovie(response.data);\n        console.log(response.data);\n        console.log(movie);\n      });\n  }, []);\n  const { vote_average, title, poster_path, overview, genres = [] } = movie;\n  return (\n    <>\n      <Button type=\"button\" text=\"Go back\" />\n      <MovieCard\n        score={vote_average}\n        title={title}\n        poster={poster_path}\n        overview={overview}\n        genres={genres}\n      />\n      <Suspense fallback={<Loading />}>\n        <Routes>\n          <Route path=\"addinfo\" element={<AddInfoSubView />}>\n            {/* <Route path=\"/cast\" element={<Cast />} />\n            <Route path=\"/reviews\" element={<Reviews />} /> */}\n          </Route>\n        </Routes>\n      </Suspense>\n    </>\n  );\n}\n"],"sourceRoot":""}