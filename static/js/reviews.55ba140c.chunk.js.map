{"version":3,"sources":["components/List/List.js","components/List/List.module.css","components/Reviews/Reviews.module.css","../node_modules/nanoid/index.browser.js","components/Reviews/Reviews.js"],"names":["List","children","heading","additionalClass","classProp","className","s","module","exports","Reviews","reviewsArray","splitContent","text","split","items","map","item","push","Reviews__passage","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","Container","length","Reviews__list","author","author_details","content","Reviews__item","Reviews__author","Reviews__constant","rating","Reviews__text"],"mappings":"uHAAA,8DAIe,SAASA,EAAT,GAKX,IAJFC,EAIC,EAJDA,SACAC,EAGC,EAHDA,QACAC,EAEC,EAFDA,gBACAC,EACC,EADDA,UAEA,OACE,qCACE,oBAAIC,UAAWD,EAAf,SAA2BF,IAC3B,oBAAIG,UAAS,UAAKC,IAAEN,KAAP,aAAgBG,GAA7B,SAAiDF,S,mBCZvDM,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,cAAgB,+BAA+B,cAAgB,+BAA+B,iBAAmB,kCAAkC,gBAAkB,iCAAiC,kBAAoB,qC,+EC0B5O,I,wCClBe,SAASC,EAAT,GAAoC,IAAjBC,EAAgB,EAAhBA,aAG1BC,EAAe,SAAAC,GACnB,IAAIC,EAAQD,EAAKC,MAAM,cACnBC,EAAQ,GAQZ,OAPAD,EAAME,KAAI,SAAAC,GACRF,EAAMG,KACJ,mBAAkBZ,UAAWC,IAAEY,iBAA/B,SACGF,GD0BE,WAGX,IAH0B,IAAdG,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,EC1COQ,QAKLd,GAGT,OACE,cAACe,EAAA,EAAD,UACGnB,EAAaoB,OAAS,EACrB,cAAC9B,EAAA,EAAD,CAAMG,gBAAiBG,IAAEyB,cAAzB,SACGrB,EAAaK,KAAI,gBAAGiB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,eAAgBC,EAA3B,EAA2BA,QAASd,EAApC,EAAoCA,GAApC,OAChB,qBAAaf,UAAWC,IAAE6B,cAA1B,UACE,sBAAK9B,UAAWC,IAAE8B,gBAAlB,UACE,mBAAG/B,UAAWC,IAAE+B,kBAAhB,kBACA,+BAAOL,IAFT,IAEwB,+BAAOC,EAAeK,YAE9C,qBAAKjC,UAAWC,IAAEiC,cAAlB,SAAkC5B,EAAauB,OALxCd,QAUb","file":"static/js/reviews.55ba140c.chunk.js","sourcesContent":["import s from 'components/List/List.module.css';\n\nimport PropTypes from 'prop-types';\n\nexport default function List({\n  children,\n  heading,\n  additionalClass,\n  classProp,\n}) {\n  return (\n    <>\n      <h2 className={classProp}>{heading}</h2>\n      <ul className={`${s.List}, ${additionalClass}`}>{children}</ul>\n    </>\n  );\n}\n\nList.propTypes = {\n  children: PropTypes.any,\n  heading: PropTypes.string,\n  additionalClass: PropTypes.string,\n  classProp: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__21E3Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Reviews__list\":\"Reviews_Reviews__list__38E1N\",\"Reviews__item\":\"Reviews_Reviews__item__3WLhS\",\"Reviews__passage\":\"Reviews_Reviews__passage__2pxdY\",\"Reviews__author\":\"Reviews_Reviews__author__bG-xA\",\"Reviews__constant\":\"Reviews_Reviews__constant__2oEWF\"};","import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { nanoid } from 'nanoid';\n\nimport Container from 'components/Container/Container';\nimport List from 'components/List/List';\n\nimport s from 'components/Reviews/Reviews.module.css';\n\nimport PropTypes from 'prop-types';\n\nexport default function Reviews({ reviewsArray }) {\n  // console.log('reviewsArray', reviewsArray);\n\n  const splitContent = text => {\n    let split = text.split(/(?:\\r?\\n)+/);\n    let items = [];\n    split.map(item => {\n      items.push(\n        <p key={nanoid()} className={s.Reviews__passage}>\n          {item}\n        </p>,\n      );\n    });\n    return items;\n  };\n\n  return (\n    <Container>\n      {reviewsArray.length > 0 ? (\n        <List additionalClass={s.Reviews__list}>\n          {reviewsArray.map(({ author, author_details, content, id }) => (\n            <li key={id} className={s.Reviews__item}>\n              <div className={s.Reviews__author}>\n                <p className={s.Reviews__constant}>user</p>\n                <span>{author}</span> <span>{author_details.rating}</span>\n              </div>\n              <div className={s.Reviews__text}>{splitContent(content)}</div>\n            </li>\n          ))}\n        </List>\n      ) : (\n        <h2>Sorry, there are no reviews on this film</h2>\n      )}\n    </Container>\n  );\n}\n\nReviews.propTypes = {\n  reviewsArray: PropTypes.array,\n};\n"],"sourceRoot":""}